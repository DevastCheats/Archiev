import os
import disnake
from disnake.ext import commands
import asyncio
import json
from typing import Dict

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
TOKEN = "tokinüòã"
OWNER_ID = "698844733954588692"

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
DATA_FOLDER = "data"
BOUND_CHANNELS_FILE = os.path.join(DATA_FOLDER, "bound_channels.json")
SENT_CLIPS_FILE = os.path.join(DATA_FOLDER, "sent_clips.json")
USER_LANGUAGES_FILE = os.path.join(DATA_FOLDER, "user_languages.json")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö
os.makedirs(DATA_FOLDER, exist_ok=True)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON
def load_json(file_path: str) -> Dict:
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as file:
            return json.load(file)
    return {}

def save_json(file_path: str, data: Dict):
    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
bound_channels = load_json(BOUND_CHANNELS_FILE)
sent_clips = load_json(SENT_CLIPS_FILE)
user_languages = load_json(USER_LANGUAGES_FILE)

# –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
ERROR_CODES = {
    "KeyError": "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞.",
    "FileNotFoundError": "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª.",
    "PermissionError": "‚ùå –û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É.",
    "OSError": "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.",
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
intents = disnake.Intents.default()
intents.message_content = True
bot = commands.InteractionBot(intents=intents)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
async def send_error_message(interaction, error_code: str):
    error_message = ERROR_CODES.get(error_code, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
    await interaction.response.send_message(f"{error_message}", ephemeral=False)

# –ö–æ–º–∞–Ω–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@bot.slash_command(name="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ.")
async def info(interaction: disnake.ApplicationCommandInteraction):
    info_message = (
        "ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∏–ø–∞–º–∏ –∏ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–æ–π.\n\n"
        "–°–æ–∑–¥–∞—Ç–µ–ª—å: @vencyeditor"
    )
    await interaction.response.send_message(info_message, ephemeral=False)

# –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
@bot.slash_command(name="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é.")
async def settings(interaction: disnake.ApplicationCommandInteraction):
    select = disnake.ui.StringSelect(
        placeholder="üîß –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
        options=[
            disnake.SelectOption(label="üìÅ –ü—Ä–∏–≤—è–∑–∫–∞ –ø–∞–ø–∫–∏", description="–ü—Ä–∏–≤—è–∑–∞—Ç—å –ø–∞–ø–∫—É –∫ –∫–∞–Ω–∞–ª—É", value="bind_folder"),
            disnake.SelectOption(label="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–ø—ã", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–ø—ã –∏–∑ –ø–∞–ø–∫–∏", value="send_clips"),
            disnake.SelectOption(label="üåç –°–º–µ–Ω–∞ —è–∑—ã–∫–∞", description="–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", value="change_language"),
        ]
    )

    async def select_callback(interaction: disnake.MessageInteraction):
        selected_option = interaction.data["values"][0]

        if selected_option == "bind_folder":
            await interaction.response.send_message("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:", ephemeral=True)

            def check(msg):
                return msg.author == interaction.user and isinstance(msg.channel, disnake.TextChannel)

            try:
                msg = await bot.wait_for("message", check=check, timeout=60)
                folder_path = msg.content

                if os.path.isdir(folder_path):
                    bound_channels[str(interaction.channel.id)] = folder_path
                    sent_clips[folder_path] = set()
                    save_json(BOUND_CHANNELS_FILE, bound_channels)
                    save_json(SENT_CLIPS_FILE, sent_clips)
                    await interaction.channel.send(f"üìÅ –ü–∞–ø–∫–∞ `{folder_path}` —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–∞–Ω–∞–ª—É `{interaction.channel.name}`.")
                else:
                    await send_error_message(interaction, "KeyError")
            except asyncio.TimeoutError:
                await interaction.response.send_message("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", ephemeral=True)

        elif selected_option == "send_clips":
            second_select = disnake.ui.StringSelect(
                placeholder="üì§ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–ø–æ–≤",
                options=[
                    disnake.SelectOption(label="üìÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∫–ª–∏–ø—ã –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∫–ª–∏–ø—ã –≤ —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª", value="send_all_this_channel"),
                    disnake.SelectOption(label="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∫–ª–∏–ø—ã –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∫–ª–∏–ø—ã –ø–æ –≤—Å–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º", value="send_all_channels"),
                    disnake.SelectOption(label="üÜï –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ –∫–ª–∏–ø—ã –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∫–ª–∏–ø—ã –≤ —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª", value="send_new_this_channel"),
                    disnake.SelectOption(label="üÜï –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ –∫–ª–∏–ø—ã –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∫–ª–∏–ø—ã –ø–æ –≤—Å–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º", value="send_new_channels"),
                ]
            )

            async def second_select_callback(interaction: disnake.MessageInteraction):
                second_option = interaction.data["values"][0]

                if second_option == "send_all_this_channel":
                    await send_all(interaction)
                elif second_option == "send_all_channels":
                    await send_all_channels(interaction)
                elif second_option == "send_new_this_channel":
                    await send_new(interaction)
                elif second_option == "send_new_channels":
                    await send_new_channels(interaction)

            second_select.callback = second_select_callback
            await interaction.response.send_message("üì§ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–ø–æ–≤:", components=[disnake.ui.ActionRow(second_select)])

        elif selected_option == "change_language":
            language_select = disnake.ui.StringSelect(
                placeholder="üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                options=[
                    disnake.SelectOption(label="–†—É—Å—Å–∫–∏–π", description="–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π", value="ru"),
                    disnake.SelectOption(label="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", description="–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π", value="en"),
                ]
            )

            async def language_select_callback(interaction: disnake.MessageInteraction):
                language = interaction.data["values"][0]

                if language in ["ru", "en"]:
                    user_languages[str(interaction.user.id)] = language
                    save_json(USER_LANGUAGES_FILE, user_languages)
                    await interaction.response.send_message(f"üåê –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ `{language.upper()}`.", ephemeral=True)
                else:
                    await interaction.response.send_message("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ RU –∏–ª–∏ EN.", ephemeral=True)

            language_select.callback = language_select_callback
            await interaction.response.send_message("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:", components=[disnake.ui.ActionRow(language_select)])

    select.callback = select_callback
    await interaction.response.send_message("üîß –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", components=[disnake.ui.ActionRow(select)])

# –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–ø–æ–≤
async def send_all(interaction: disnake.ApplicationCommandInteraction):
    if str(interaction.channel.id) in bound_channels:
        folder_path = bound_channels[str(interaction.channel.id)]
        clips = os.listdir(folder_path)
        for clip in clips:
            try:
                with open(os.path.join(folder_path, clip), "rb") as f:
                    await interaction.channel.send(file=disnake.File(f, clip))
                sent_clips[folder_path].add(clip)
            except Exception as e:
                await send_error_message(interaction, type(e).__name__)
        save_json(SENT_CLIPS_FILE, sent_clips)
        await interaction.response.send_message("üì§ –í—Å–µ –∫–ª–∏–ø—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    else:
        await interaction.response.send_message("üö´ –ü–∞–ø–∫–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É.")

async def send_new(interaction: disnake.ApplicationCommandInteraction):
    if str(interaction.channel.id) in bound_channels:
        folder_path = bound_channels[str(interaction.channel.id)]
        new_clips = [clip for clip in os.listdir(folder_path) if clip not in sent_clips.get(folder_path, set())]
        for clip in new_clips:
            try:
                with open(os.path.join(folder_path, clip), "rb") as f:
                    await interaction.channel.send(file=disnake.File(f, clip))
                sent_clips[folder_path].add(clip)
            except Exception as e:
                await send_error_message(interaction, type(e).__name__)
        save_json(SENT_CLIPS_FILE, sent_clips)
        await interaction.response.send_message("üÜï –ù–æ–≤—ã–µ –∫–ª–∏–ø—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    else:
        await interaction.response.send_message("üö´ –ü–∞–ø–∫–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É.")

async def send_all_channels(interaction: disnake.ApplicationCommandInteraction):
    if bound_channels:
        for channel_id, folder_path in bound_channels.items():
            channel = bot.get_channel(int(channel_id))
            if channel:
                clips = os.listdir(folder_path)
                for clip in clips:
                    try:
                        with open(os.path.join(folder_path, clip), "rb") as f:
                            await channel.send(file=disnake.File(f, clip))
                        sent_clips[folder_path].add(clip)
                    except Exception as e:
                        await send_error_message(interaction, type(e).__name__)
        save_json(SENT_CLIPS_FILE, sent_clips)
        await interaction.response.send_message("üì§ –í—Å–µ –∫–ª–∏–ø—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º.")
    else:
        await interaction.response.send_message("üö´ –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")

async def send_new_channels(interaction: disnake.ApplicationCommandInteraction):
    if bound_channels:
        for channel_id, folder_path in bound_channels.items():
            channel = bot.get_channel(int(channel_id))
            if channel:
                new_clips = [clip for clip in os.listdir(folder_path) if clip not in sent_clips.get(folder_path, set())]
                for clip in new_clips:
                    try:
                        with open(os.path.join(folder_path, clip), "rb") as f:
                            await channel.send(file=disnake.File(f, clip))
                        sent_clips[folder_path].add(clip)
                    except Exception as e:
                        await send_error_message(interaction, type(e).__name__)
        save_json(SENT_CLIPS_FILE, sent_clips)
        await interaction.response.send_message("üÜï –ù–æ–≤—ã–µ –∫–ª–∏–ø—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º.")
    else:
        await interaction.response.send_message("üö´ –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run(TOKEN)
