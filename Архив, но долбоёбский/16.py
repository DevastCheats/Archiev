import requests
import json
import time
from datetime import datetime, timedelta

# –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
TOKEN = "tokinüòã"
INPUT_USER_ID = "698844733954588692"  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –≤ input
RESPONSE_USER_ID = "998266043946504313"  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –≤ response
LIMIT = 50  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
TOTAL_MESSAGES = 2000  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞

# URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
url = f"https://discord.com/api/v9/users/@me/channels"

headers = {
    "Authorization": TOKEN,
    "Content-Type": "application/json"
}

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (–≤–∫–ª—é—á–∞—è –õ–°)
response = requests.get(url, headers=headers)
channels = response.json()

# –ù–∞—Ö–æ–¥–∏–º –ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (RESPONSE_USER_ID)
dm_channel = None
for channel in channels:
    if channel["type"] == 1 and RESPONSE_USER_ID in [user["id"] for user in channel["recipients"]]:
        dm_channel = channel["id"]
        break

if dm_channel:
    messages_dict = {}
    last_message_id = None
    total_fetched = 0

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    while total_fetched < TOTAL_MESSAGES:
        params = {"limit": LIMIT}
        if last_message_id:
            params["before"] = last_message_id

        url_messages = f"https://discord.com/api/v9/channels/{dm_channel}/messages"
        response = requests.get(url_messages, headers=headers, params=params)
        
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            break
        
        messages = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        if not messages:
            print("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏–π, –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.")
            break

        for message in messages:
            timestamp_str = message["timestamp"]
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            message_time = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
            if message["content"]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                messages_dict[message["id"]] = {
                    "content": message["content"],
                    "timestamp": message_time,
                    "author_id": message["author"]["id"]
                }

        last_message_id = messages[-1]["id"]
        total_fetched += len(messages)

        print(f"–ü–æ–ª—É—á–µ–Ω–æ {total_fetched} —Å–æ–æ–±—â–µ–Ω–∏–π...")

        if len(messages) < LIMIT:
            print("–ú–µ–Ω—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π, —á–µ–º –ª–∏–º–∏—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
            break

        time.sleep(1)  # –ü–∞—É–∑–∞ –¥–ª—è –∏–∑–±–µ–≥–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤

    # –ù–∞–π–¥–µ–º –ø–∞—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–¥–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
    message_pairs = []
    input_messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    used_messages = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    message_counter = 1045  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π

    def get_user_id(author_id):
        return "u0" if author_id == INPUT_USER_ID else "u2"  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

    for message_id, message_data in messages_dict.items():
        if message_id in used_messages:
            continue

        if message_data["author_id"] == INPUT_USER_ID or message_data["author_id"] == RESPONSE_USER_ID:
            formatted_message = f"L{message_counter} +++$+++ {get_user_id(message_data['author_id'])} +++$+++ m0 +++$+++ {'BIANCA' if message_data['author_id'] == INPUT_USER_ID else 'CAMERON'} +++$+++ {message_data['content']}"
            message_pairs.append(formatted_message)
            message_counter += 1
            used_messages.add(message_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª
    with open("dialogues_formatted.txt", "w", encoding="utf-8") as f:
        f.write("\n".join(message_pairs))

    print(f"–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ dialogues_formatted.txt")
else:
    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –õ–° —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID {RESPONSE_USER_ID}")
